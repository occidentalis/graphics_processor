//IP Functional Simulation Model
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_simgen 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lpm_mult 5 lut 66 mux21 24 oper_add 9 oper_mux 33 
`timescale 1 ps / 1 ps
module  fp_mul
	( 
	a,
	areset,
	b,
	clk,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  a;
	input   areset;
	input   [31:0]  b;
	input   clk;
	output   [31:0]  q;

	reg	n1Oi;
	reg	n00OO;
	reg	n0i0i;
	reg	n0i0l;
	reg	n0i0O;
	reg	n0i1i;
	reg	n0i1l;
	reg	n0i1O;
	reg	n0iii;
	reg	n0iil;
	reg	n0iiO;
	reg	n0ili;
	reg	n0ill;
	reg	n0ilO;
	reg	n0iOi;
	reg	n0iOl;
	reg	n0l0l;
	reg	n0l0O;
	reg	n0lii;
	reg	n0lil;
	reg	n0liO;
	reg	n0lli;
	reg	n0lll;
	reg	n0llO;
	reg	n0lOi;
	reg	n0lOl;
	reg	n0lOO;
	reg	n0O0i;
	reg	n0O0l;
	reg	n0O0O;
	reg	n0O1i;
	reg	n0O1l;
	reg	n0O1O;
	reg	n0Oii;
	reg	n0Oil;
	reg	n0OiO;
	reg	n0Oli;
	reg	n0Oll;
	reg	n0OlO;
	reg	n0OOi;
	reg	n0OOl;
	reg	n0OOO;
	reg	n11i;
	reg	ni10i;
	reg	ni10l;
	reg	ni10O;
	reg	ni11i;
	reg	ni11l;
	reg	ni11O;
	reg	ni1ii;
	reg	ni1il;
	reg	ni1iO;
	reg	ni1li;
	reg	ni1ll;
	reg	ni1lO;
	reg	ni1Oi;
	reg	ni1Ol;
	reg	nl0O;
	reg	nlii;
	reg	nlil;
	reg	nliO;
	reg	nlli;
	reg	nlll;
	reg	nllO;
	reg	nlOl;
	reg	nlOOO;
	wire  [3:0]   wire_n0iOO_result;
	wire  [35:0]   wire_n0l0i_result;
	wire  [3:0]   wire_n0l1i_result;
	wire  [17:0]   wire_n0l1l_result;
	wire  [17:0]   wire_n0l1O_result;
	wire	wire_n0ll_dataout;
	wire	wire_n0lO_dataout;
	wire	wire_n0Oi_dataout;
	wire	wire_n0Ol_dataout;
	wire	wire_n0OO_dataout;
	wire	wire_ni0i_dataout;
	wire	wire_ni0l_dataout;
	wire	wire_ni0O_dataout;
	wire	wire_ni1i_dataout;
	wire	wire_ni1l_dataout;
	wire	wire_ni1O_dataout;
	wire	wire_niii_dataout;
	wire	wire_niil_dataout;
	wire	wire_niiO_dataout;
	wire	wire_nili_dataout;
	wire	wire_nill_dataout;
	wire	wire_nilO_dataout;
	wire	wire_niOi_dataout;
	wire	wire_niOl_dataout;
	wire	wire_niOO_dataout;
	wire	wire_nl0i_dataout;
	wire	wire_nl1i_dataout;
	wire	wire_nl1l_dataout;
	wire	wire_nl1O_dataout;
	wire  [33:0]   wire_n0i_o;
	wire  [14:0]   wire_n0iO_o;
	wire  [36:0]   wire_n0li_o;
	wire  [37:0]   wire_n1i_o;
	wire  [36:0]   wire_n1l_o;
	wire  [14:0]   wire_n1ll_o;
	wire  [13:0]   wire_n1O_o;
	wire  [12:0]   wire_nl0l_o;
	wire  [8:0]   wire_nlOO_o;
	wire  wire_n11l_o;
	wire  wire_n11O_o;
	wire  wire_nliOl_o;
	wire  wire_nliOO_o;
	wire  wire_nll0i_o;
	wire  wire_nll0l_o;
	wire  wire_nll0O_o;
	wire  wire_nll1i_o;
	wire  wire_nll1l_o;
	wire  wire_nll1O_o;
	wire  wire_nllii_o;
	wire  wire_nllil_o;
	wire  wire_nlliO_o;
	wire  wire_nllli_o;
	wire  wire_nllll_o;
	wire  wire_nlllO_o;
	wire  wire_nllOi_o;
	wire  wire_nllOl_o;
	wire  wire_nllOO_o;
	wire  wire_nlO0i_o;
	wire  wire_nlO0l_o;
	wire  wire_nlO0O_o;
	wire  wire_nlO1i_o;
	wire  wire_nlO1l_o;
	wire  wire_nlO1O_o;
	wire  wire_nlOii_o;
	wire  wire_nlOil_o;
	wire  wire_nlOiO_o;
	wire  wire_nlOli_o;
	wire  wire_nlOll_o;
	wire  wire_nlOlO_o;
	wire  wire_nlOOi_o;
	wire  wire_nlOOl_o;
	wire  n000i;
	wire  n000l;
	wire  n000O;
	wire  n001i;
	wire  n001l;
	wire  n001O;
	wire  n00ii;
	wire  n00il;
	wire  n00iO;
	wire  n00li;
	wire  n00ll;
	wire  n00lO;
	wire  n01Oi;
	wire  n01Ol;
	wire  n01OO;

	initial
	begin
		n1Oi = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n1Oi <= 1;
		end
		else 
		begin
			n1Oi <= wire_n11l_o;
		end
	end
	event n1Oi_event;
	initial
		#1 ->n1Oi_event;
	always @(n1Oi_event)
		n1Oi <= 1;
	initial
	begin
		n00OO = 0;
		n0i0i = 0;
		n0i0l = 0;
		n0i0O = 0;
		n0i1i = 0;
		n0i1l = 0;
		n0i1O = 0;
		n0iii = 0;
		n0iil = 0;
		n0iiO = 0;
		n0ili = 0;
		n0ill = 0;
		n0ilO = 0;
		n0iOi = 0;
		n0iOl = 0;
		n0l0l = 0;
		n0l0O = 0;
		n0lii = 0;
		n0lil = 0;
		n0liO = 0;
		n0lli = 0;
		n0lll = 0;
		n0llO = 0;
		n0lOi = 0;
		n0lOl = 0;
		n0lOO = 0;
		n0O0i = 0;
		n0O0l = 0;
		n0O0O = 0;
		n0O1i = 0;
		n0O1l = 0;
		n0O1O = 0;
		n0Oii = 0;
		n0Oil = 0;
		n0OiO = 0;
		n0Oli = 0;
		n0Oll = 0;
		n0OlO = 0;
		n0OOi = 0;
		n0OOl = 0;
		n0OOO = 0;
		n11i = 0;
		ni10i = 0;
		ni10l = 0;
		ni10O = 0;
		ni11i = 0;
		ni11l = 0;
		ni11O = 0;
		ni1ii = 0;
		ni1il = 0;
		ni1iO = 0;
		ni1li = 0;
		ni1ll = 0;
		ni1lO = 0;
		ni1Oi = 0;
		ni1Ol = 0;
		nl0O = 0;
		nlii = 0;
		nlil = 0;
		nliO = 0;
		nlli = 0;
		nlll = 0;
		nllO = 0;
		nlOl = 0;
		nlOOO = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n00OO <= 0;
			n0i0i <= 0;
			n0i0l <= 0;
			n0i0O <= 0;
			n0i1i <= 0;
			n0i1l <= 0;
			n0i1O <= 0;
			n0iii <= 0;
			n0iil <= 0;
			n0iiO <= 0;
			n0ili <= 0;
			n0ill <= 0;
			n0ilO <= 0;
			n0iOi <= 0;
			n0iOl <= 0;
			n0l0l <= 0;
			n0l0O <= 0;
			n0lii <= 0;
			n0lil <= 0;
			n0liO <= 0;
			n0lli <= 0;
			n0lll <= 0;
			n0llO <= 0;
			n0lOi <= 0;
			n0lOl <= 0;
			n0lOO <= 0;
			n0O0i <= 0;
			n0O0l <= 0;
			n0O0O <= 0;
			n0O1i <= 0;
			n0O1l <= 0;
			n0O1O <= 0;
			n0Oii <= 0;
			n0Oil <= 0;
			n0OiO <= 0;
			n0Oli <= 0;
			n0Oll <= 0;
			n0OlO <= 0;
			n0OOi <= 0;
			n0OOl <= 0;
			n0OOO <= 0;
			n11i <= 0;
			ni10i <= 0;
			ni10l <= 0;
			ni10O <= 0;
			ni11i <= 0;
			ni11l <= 0;
			ni11O <= 0;
			ni1ii <= 0;
			ni1il <= 0;
			ni1iO <= 0;
			ni1li <= 0;
			ni1ll <= 0;
			ni1lO <= 0;
			ni1Oi <= 0;
			ni1Ol <= 0;
			nl0O <= 0;
			nlii <= 0;
			nlil <= 0;
			nliO <= 0;
			nlli <= 0;
			nlll <= 0;
			nllO <= 0;
			nlOl <= 0;
			nlOOO <= 0;
		end
		else 
		begin
			n00OO <= n001O;
			n0i0i <= n001i;
			n0i0l <= n0i0i;
			n0i0O <= n01OO;
			n0i1i <= n00OO;
			n0i1l <= n001l;
			n0i1O <= n0i1l;
			n0iii <= n0i0O;
			n0iil <= n01Ol;
			n0iiO <= n0iil;
			n0ili <= n01Oi;
			n0ill <= n0ili;
			n0ilO <= (a[31] ^ b[31]);
			n0iOi <= n0ilO;
			n0iOl <= ((~ n00li) & n0iOi);
			n0l0l <= n11i;
			n0l0O <= nl0O;
			n0lii <= nlii;
			n0lil <= nlil;
			n0liO <= nliO;
			n0lli <= nlli;
			n0lll <= nlll;
			n0llO <= nllO;
			n0lOi <= nlOl;
			n0lOl <= wire_n0li_o[24];
			n0lOO <= wire_n0li_o[25];
			n0O0i <= wire_n0li_o[29];
			n0O0l <= wire_n0li_o[30];
			n0O0O <= wire_n0li_o[31];
			n0O1i <= wire_n0li_o[26];
			n0O1l <= wire_n0li_o[27];
			n0O1O <= wire_n0li_o[28];
			n0Oii <= wire_n0li_o[1];
			n0Oil <= wire_n0li_o[2];
			n0OiO <= wire_n0li_o[3];
			n0Oli <= wire_n0li_o[4];
			n0Oll <= wire_n0li_o[5];
			n0OlO <= wire_n0li_o[6];
			n0OOi <= wire_n0li_o[7];
			n0OOl <= wire_n0li_o[8];
			n0OOO <= wire_n0li_o[9];
			n11i <= wire_nlOO_o[0];
			ni10i <= wire_n0li_o[13];
			ni10l <= wire_n0li_o[14];
			ni10O <= wire_n0li_o[15];
			ni11i <= wire_n0li_o[10];
			ni11l <= wire_n0li_o[11];
			ni11O <= wire_n0li_o[12];
			ni1ii <= wire_n0li_o[16];
			ni1il <= wire_n0li_o[17];
			ni1iO <= wire_n0li_o[18];
			ni1li <= wire_n0li_o[19];
			ni1ll <= wire_n0li_o[20];
			ni1lO <= wire_n0li_o[21];
			ni1Oi <= wire_n0li_o[22];
			ni1Ol <= wire_n0li_o[23];
			nl0O <= wire_nlOO_o[1];
			nlii <= wire_nlOO_o[2];
			nlil <= wire_nlOO_o[3];
			nliO <= wire_nlOO_o[4];
			nlli <= wire_nlOO_o[5];
			nlll <= wire_nlOO_o[6];
			nllO <= wire_nlOO_o[7];
			nlOl <= wire_nlOO_o[8];
			nlOOO <= wire_n11O_o;
		end
	end
	lpm_mult   n0iOO
	( 
	.aclr(areset),
	.clken(1'b1),
	.clock(clk),
	.dataa({a[5:4]}),
	.datab({b[14:13]}),
	.result(wire_n0iOO_result),
	.sum()
	);
	defparam
		n0iOO.lpm_pipeline = 2,
		n0iOO.lpm_representation = "UNSIGNED",
		n0iOO.lpm_widtha = 2,
		n0iOO.lpm_widthb = 2,
		n0iOO.lpm_widthp = 4,
		n0iOO.lpm_widths = 1,
		n0iOO.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n0l0i
	( 
	.aclr(areset),
	.clken(1'b1),
	.clock(clk),
	.dataa({1'b1, a[22:6]}),
	.datab({1'b1, b[22:6]}),
	.result(wire_n0l0i_result),
	.sum()
	);
	defparam
		n0l0i.lpm_pipeline = 2,
		n0l0i.lpm_representation = "UNSIGNED",
		n0l0i.lpm_widtha = 18,
		n0l0i.lpm_widthb = 18,
		n0l0i.lpm_widthp = 36,
		n0l0i.lpm_widths = 1,
		n0l0i.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n0l1i
	( 
	.aclr(areset),
	.clken(1'b1),
	.clock(clk),
	.dataa({a[14:13]}),
	.datab({b[5:4]}),
	.result(wire_n0l1i_result),
	.sum()
	);
	defparam
		n0l1i.lpm_pipeline = 2,
		n0l1i.lpm_representation = "UNSIGNED",
		n0l1i.lpm_widtha = 2,
		n0l1i.lpm_widthb = 2,
		n0l1i.lpm_widthp = 4,
		n0l1i.lpm_widths = 1,
		n0l1i.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n0l1l
	( 
	.aclr(areset),
	.clken(1'b1),
	.clock(clk),
	.dataa({a[5:0], {3{1'b0}}}),
	.datab({1'b1, b[22:15]}),
	.result(wire_n0l1l_result),
	.sum()
	);
	defparam
		n0l1l.lpm_pipeline = 2,
		n0l1l.lpm_representation = "UNSIGNED",
		n0l1l.lpm_widtha = 9,
		n0l1l.lpm_widthb = 9,
		n0l1l.lpm_widthp = 18,
		n0l1l.lpm_widths = 1,
		n0l1l.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n0l1O
	( 
	.aclr(areset),
	.clken(1'b1),
	.clock(clk),
	.dataa({1'b1, a[22:15]}),
	.datab({b[5:0], {3{1'b0}}}),
	.result(wire_n0l1O_result),
	.sum()
	);
	defparam
		n0l1O.lpm_pipeline = 2,
		n0l1O.lpm_representation = "UNSIGNED",
		n0l1O.lpm_widtha = 9,
		n0l1O.lpm_widthb = 9,
		n0l1O.lpm_widthp = 18,
		n0l1O.lpm_widths = 1,
		n0l1O.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	assign		wire_n0ll_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[5] : wire_n0i_o[6];
	assign		wire_n0lO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[6] : wire_n0i_o[7];
	assign		wire_n0Oi_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[7] : wire_n0i_o[8];
	assign		wire_n0Ol_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[8] : wire_n0i_o[9];
	assign		wire_n0OO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[9] : wire_n0i_o[10];
	assign		wire_ni0i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[13] : wire_n0i_o[14];
	assign		wire_ni0l_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[14] : wire_n0i_o[15];
	assign		wire_ni0O_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[15] : wire_n0i_o[16];
	assign		wire_ni1i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[10] : wire_n0i_o[11];
	assign		wire_ni1l_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[11] : wire_n0i_o[12];
	assign		wire_ni1O_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[12] : wire_n0i_o[13];
	assign		wire_niii_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[16] : wire_n0i_o[17];
	assign		wire_niil_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[17] : wire_n0i_o[18];
	assign		wire_niiO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[18] : wire_n0i_o[19];
	assign		wire_nili_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[19] : wire_n0i_o[20];
	assign		wire_nill_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[20] : wire_n0i_o[21];
	assign		wire_nilO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[21] : wire_n0i_o[22];
	assign		wire_niOi_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[22] : wire_n0i_o[23];
	assign		wire_niOl_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[23] : wire_n0i_o[24];
	assign		wire_niOO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[24] : wire_n0i_o[25];
	assign		wire_nl0i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[28] : wire_n0i_o[29];
	assign		wire_nl1i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[25] : wire_n0i_o[26];
	assign		wire_nl1l_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[26] : wire_n0i_o[27];
	assign		wire_nl1O_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[27] : wire_n0i_o[28];
	oper_add   n0i
	( 
	.a({1'b0, wire_n1i_o[37:5]}),
	.b({{30{1'b0}}, wire_n0iOO_result[3:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0i_o));
	defparam
		n0i.sgate_representation = 0,
		n0i.width_a = 34,
		n0i.width_b = 34,
		n0i.width_o = 34;
	oper_add   n0iO
	( 
	.a({{2{wire_n0li_o[35]}}, wire_n0li_o[35:24], 1'b1}),
	.b({{6{1'b1}}, {8{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0iO_o));
	defparam
		n0iO.sgate_representation = 0,
		n0iO.width_a = 15,
		n0iO.width_b = 15,
		n0iO.width_o = 15;
	oper_add   n0li
	( 
	.a({{2{wire_nl0l_o[11]}}, wire_nl0l_o[11:1], wire_nl0i_dataout, wire_nl1O_dataout, wire_nl1l_dataout, wire_nl1i_dataout, wire_niOO_dataout, wire_niOl_dataout, wire_niOi_dataout, wire_nilO_dataout, wire_nill_dataout, wire_nili_dataout, wire_niiO_dataout, wire_niil_dataout, wire_niii_dataout, wire_ni0O_dataout, wire_ni0l_dataout, wire_ni0i_dataout, wire_ni1O_dataout, wire_ni1l_dataout, wire_ni1i_dataout, wire_n0OO_dataout, wire_n0Ol_dataout, wire_n0Oi_dataout, wire_n0lO_dataout, wire_n0ll_dataout}),
	.b({{12{1'b0}}, wire_n0i_o[30], {23{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0li_o));
	defparam
		n0li.sgate_representation = 0,
		n0li.width_a = 37,
		n0li.width_b = 37,
		n0li.width_o = 37;
	oper_add   n1i
	( 
	.a({1'b0, wire_n1l_o[36:0]}),
	.b({{19{1'b0}}, wire_n1O_o[13:0], wire_n0l1l_result[4:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1i_o));
	defparam
		n1i.sgate_representation = 0,
		n1i.width_a = 38,
		n1i.width_b = 38,
		n1i.width_o = 38;
	oper_add   n1l
	( 
	.a({1'b0, wire_n0l0i_result[35:0]}),
	.b({{19{1'b0}}, wire_n0l1O_result[17:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1l_o));
	defparam
		n1l.sgate_representation = 0,
		n1l.width_a = 37,
		n1l.width_b = 37,
		n1l.width_o = 37;
	oper_add   n1ll
	( 
	.a({{3{(~ wire_n0li_o[35])}}, (~ wire_n0li_o[34]), (~ wire_n0li_o[33]), (~ wire_n0li_o[32]), (~ wire_n0li_o[31]), (~ wire_n0li_o[30]), (~ wire_n0li_o[29]), (~ wire_n0li_o[28]), (~ wire_n0li_o[27]), (~ wire_n0li_o[26]), (~ wire_n0li_o[25]), (~ wire_n0li_o[24]), 1'b1}),
	.b({{14{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1ll_o));
	defparam
		n1ll.sgate_representation = 0,
		n1ll.width_a = 15,
		n1ll.width_b = 15,
		n1ll.width_o = 15;
	oper_add   n1O
	( 
	.a({1'b0, wire_n0l1l_result[17:5]}),
	.b({{10{1'b0}}, wire_n0l1i_result[3:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1O_o));
	defparam
		n1O.sgate_representation = 0,
		n1O.width_a = 14,
		n1O.width_b = 14,
		n1O.width_o = 14;
	oper_add   nl0l
	( 
	.a({{3{1'b0}}, n0lOi, n0llO, n0lll, n0lli, n0liO, n0lil, n0lii, n0l0O, n0l0l, 1'b1}),
	.b({{5{1'b1}}, {7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl0l_o));
	defparam
		nl0l.sgate_representation = 0,
		nl0l.width_a = 13,
		nl0l.width_b = 13,
		nl0l.width_o = 13;
	oper_add   nlOO
	( 
	.a({1'b0, a[30:23]}),
	.b({1'b0, b[30:23]}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOO_o));
	defparam
		nlOO.sgate_representation = 0,
		nlOO.width_a = 9,
		nlOO.width_b = 9,
		nlOO.width_o = 9;
	oper_mux   n11l
	( 
	.data({{3{1'b0}}, 1'b1}),
	.o(wire_n11l_o),
	.sel({n000l, n000i}));
	defparam
		n11l.width_data = 4,
		n11l.width_sel = 2;
	oper_mux   n11O
	( 
	.data({{3{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_n11O_o),
	.sel({n00li, n000l, n000i}));
	defparam
		n11O.width_data = 8,
		n11O.width_sel = 3;
	oper_mux   nliOl
	( 
	.data({1'b1, 1'b0, n0Oii, 1'b0}),
	.o(wire_nliOl_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nliOl.width_data = 4,
		nliOl.width_sel = 2;
	oper_mux   nliOO
	( 
	.data({{2{1'b0}}, n0Oil, 1'b0}),
	.o(wire_nliOO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nliOO.width_data = 4,
		nliOO.width_sel = 2;
	oper_mux   nll0i
	( 
	.data({{2{1'b0}}, n0OlO, 1'b0}),
	.o(wire_nll0i_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll0i.width_data = 4,
		nll0i.width_sel = 2;
	oper_mux   nll0l
	( 
	.data({{2{1'b0}}, n0OOi, 1'b0}),
	.o(wire_nll0l_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll0l.width_data = 4,
		nll0l.width_sel = 2;
	oper_mux   nll0O
	( 
	.data({{2{1'b0}}, n0OOl, 1'b0}),
	.o(wire_nll0O_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll0O.width_data = 4,
		nll0O.width_sel = 2;
	oper_mux   nll1i
	( 
	.data({{2{1'b0}}, n0OiO, 1'b0}),
	.o(wire_nll1i_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll1i.width_data = 4,
		nll1i.width_sel = 2;
	oper_mux   nll1l
	( 
	.data({{2{1'b0}}, n0Oli, 1'b0}),
	.o(wire_nll1l_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll1l.width_data = 4,
		nll1l.width_sel = 2;
	oper_mux   nll1O
	( 
	.data({{2{1'b0}}, n0Oll, 1'b0}),
	.o(wire_nll1O_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nll1O.width_data = 4,
		nll1O.width_sel = 2;
	oper_mux   nllii
	( 
	.data({{2{1'b0}}, n0OOO, 1'b0}),
	.o(wire_nllii_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllii.width_data = 4,
		nllii.width_sel = 2;
	oper_mux   nllil
	( 
	.data({{2{1'b0}}, ni11i, 1'b0}),
	.o(wire_nllil_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllil.width_data = 4,
		nllil.width_sel = 2;
	oper_mux   nlliO
	( 
	.data({{2{1'b0}}, ni11l, 1'b0}),
	.o(wire_nlliO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlliO.width_data = 4,
		nlliO.width_sel = 2;
	oper_mux   nllli
	( 
	.data({{2{1'b0}}, ni11O, 1'b0}),
	.o(wire_nllli_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllli.width_data = 4,
		nllli.width_sel = 2;
	oper_mux   nllll
	( 
	.data({{2{1'b0}}, ni10i, 1'b0}),
	.o(wire_nllll_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllll.width_data = 4,
		nllll.width_sel = 2;
	oper_mux   nlllO
	( 
	.data({{2{1'b0}}, ni10l, 1'b0}),
	.o(wire_nlllO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlllO.width_data = 4,
		nlllO.width_sel = 2;
	oper_mux   nllOi
	( 
	.data({{2{1'b0}}, ni10O, 1'b0}),
	.o(wire_nllOi_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllOi.width_data = 4,
		nllOi.width_sel = 2;
	oper_mux   nllOl
	( 
	.data({{2{1'b0}}, ni1ii, 1'b0}),
	.o(wire_nllOl_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllOl.width_data = 4,
		nllOl.width_sel = 2;
	oper_mux   nllOO
	( 
	.data({{2{1'b0}}, ni1il, 1'b0}),
	.o(wire_nllOO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nllOO.width_data = 4,
		nllOO.width_sel = 2;
	oper_mux   nlO0i
	( 
	.data({{2{1'b0}}, ni1lO, 1'b0}),
	.o(wire_nlO0i_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO0i.width_data = 4,
		nlO0i.width_sel = 2;
	oper_mux   nlO0l
	( 
	.data({{2{1'b0}}, ni1Oi, 1'b0}),
	.o(wire_nlO0l_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO0l.width_data = 4,
		nlO0l.width_sel = 2;
	oper_mux   nlO0O
	( 
	.data({{2{1'b0}}, ni1Ol, 1'b0}),
	.o(wire_nlO0O_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO0O.width_data = 4,
		nlO0O.width_sel = 2;
	oper_mux   nlO1i
	( 
	.data({{2{1'b0}}, ni1iO, 1'b0}),
	.o(wire_nlO1i_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO1i.width_data = 4,
		nlO1i.width_sel = 2;
	oper_mux   nlO1l
	( 
	.data({{2{1'b0}}, ni1li, 1'b0}),
	.o(wire_nlO1l_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO1l.width_data = 4,
		nlO1l.width_sel = 2;
	oper_mux   nlO1O
	( 
	.data({{2{1'b0}}, ni1ll, 1'b0}),
	.o(wire_nlO1O_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlO1O.width_data = 4,
		nlO1O.width_sel = 2;
	oper_mux   nlOii
	( 
	.data({{2{1'b1}}, n0lOl, 1'b0}),
	.o(wire_nlOii_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOii.width_data = 4,
		nlOii.width_sel = 2;
	oper_mux   nlOil
	( 
	.data({{2{1'b1}}, n0lOO, 1'b0}),
	.o(wire_nlOil_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOil.width_data = 4,
		nlOil.width_sel = 2;
	oper_mux   nlOiO
	( 
	.data({{2{1'b1}}, n0O1i, 1'b0}),
	.o(wire_nlOiO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOiO.width_data = 4,
		nlOiO.width_sel = 2;
	oper_mux   nlOli
	( 
	.data({{2{1'b1}}, n0O1l, 1'b0}),
	.o(wire_nlOli_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOli.width_data = 4,
		nlOli.width_sel = 2;
	oper_mux   nlOll
	( 
	.data({{2{1'b1}}, n0O1O, 1'b0}),
	.o(wire_nlOll_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOll.width_data = 4,
		nlOll.width_sel = 2;
	oper_mux   nlOlO
	( 
	.data({{2{1'b1}}, n0O0i, 1'b0}),
	.o(wire_nlOlO_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOlO.width_data = 4,
		nlOlO.width_sel = 2;
	oper_mux   nlOOi
	( 
	.data({{2{1'b1}}, n0O0l, 1'b0}),
	.o(wire_nlOOi_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOOi.width_data = 4,
		nlOOi.width_sel = 2;
	oper_mux   nlOOl
	( 
	.data({{2{1'b1}}, n0O0O, 1'b0}),
	.o(wire_nlOOl_o),
	.sel({nlOOO, n1Oi}));
	defparam
		nlOOl.width_data = 4,
		nlOOl.width_sel = 2;
	assign
		n000i = ((n000O & (~ wire_n1ll_o[14])) | ((n00ii & n0i0l) | ((n00il & n0ill) | (n0i0l & n0ill)))),
		n000l = (((~ wire_n0iO_o[14]) & n000O) | ((n00lO & n00il) | ((n00ll & n00ii) | (n00lO & n00ll)))),
		n000O = (n00il & n00ii),
		n001i = ((((((((~ b[23]) & (~ b[24])) & (~ b[25])) & (~ b[26])) & (~ b[27])) & (~ b[28])) & (~ b[29])) & (~ b[30])),
		n001l = (((((((a[23] & a[24]) & a[25]) & a[26]) & a[27]) & a[28]) & a[29]) & a[30]),
		n001O = (((((((((((((((((((((((~ a[0]) & (~ a[1])) & (~ a[2])) & (~ a[3])) & (~ a[4])) & (~ a[5])) & (~ a[6])) & (~ a[7])) & (~ a[8])) & (~ a[9])) & (~ a[10])) & (~ a[11])) & (~ a[12])) & (~ a[13])) & (~ a[14])) & (~ a[15])) & (~ a[16])) & (~ a[17])) & (~ a[18])) & (~ a[19])) & (~ a[20])) & (~ a[21])) & (~ a[22])),
		n00ii = ((~ n0i1O) & (~ n0ill)),
		n00il = ((~ n0i0l) & (~ n0iiO)),
		n00iO = 1'b1,
		n00li = (((n00lO & n0i0l) | (n00ll & n0ill)) | (((~ n0iii) & n0iiO) | ((~ n0i1i) & n0i1O))),
		n00ll = (n0iii & n0iiO),
		n00lO = (n0i1i & n0i1O),
		n01Oi = ((((((((~ a[23]) & (~ a[24])) & (~ a[25])) & (~ a[26])) & (~ a[27])) & (~ a[28])) & (~ a[29])) & (~ a[30])),
		n01Ol = (((((((b[23] & b[24]) & b[25]) & b[26]) & b[27]) & b[28]) & b[29]) & b[30]),
		n01OO = (((((((((((((((((((((((~ b[0]) & (~ b[1])) & (~ b[2])) & (~ b[3])) & (~ b[4])) & (~ b[5])) & (~ b[6])) & (~ b[7])) & (~ b[8])) & (~ b[9])) & (~ b[10])) & (~ b[11])) & (~ b[12])) & (~ b[13])) & (~ b[14])) & (~ b[15])) & (~ b[16])) & (~ b[17])) & (~ b[18])) & (~ b[19])) & (~ b[20])) & (~ b[21])) & (~ b[22])),
		q = {n0iOl, wire_nlOOl_o, wire_nlOOi_o, wire_nlOlO_o, wire_nlOll_o, wire_nlOli_o, wire_nlOiO_o, wire_nlOil_o, wire_nlOii_o, wire_nlO0O_o, wire_nlO0l_o, wire_nlO0i_o, wire_nlO1O_o, wire_nlO1l_o, wire_nlO1i_o, wire_nllOO_o, wire_nllOl_o, wire_nllOi_o, wire_nlllO_o, wire_nllll_o, wire_nllli_o, wire_nlliO_o, wire_nllil_o, wire_nllii_o, wire_nll0O_o, wire_nll0l_o, wire_nll0i_o, wire_nll1O_o, wire_nll1l_o, wire_nll1i_o, wire_nliOO_o, wire_nliOl_o};
endmodule //fp_mul
//synopsys translate_on
//VALID FILE
